name: Terraform Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'model/*.json'
      - 'model/*.joblib'
      - '.devcontainer/*'

jobs:
  create-data-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Set execute permissions on package_lambda.sh
        working-directory: infraestructure
        run: chmod +x ./lambda/package_lambda.sh

      - name: Run Lambda Packaging Script
        working-directory: infraestructure
        run: ./lambda/package_lambda.sh

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: infraestructure
        run: terraform init

      - name: Set execute permissions on terraform-import.sh
        working-directory: infraestructure
        run: chmod +x ./terraform-import.sh

      - name: Terraform Import Resources
        working-directory: infraestructure
        run: ./terraform-import.sh

      - name: Terraform Plan
        working-directory: infraestructure
        run: terraform plan

      - name: Terraform Apply
        working-directory: infraestructure
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve


  start-data-pipeline:
    needs: create-data-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Account ID
        id: account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"

      - name: Execute Step Function
        run: |
          aws stepfunctions start-execution \
            --state-machine-arn arn:aws:states:${{ secrets.AWS_REGION }}:${{ steps.account.outputs.account_id }}:stateMachine:ETLWorkflow \
            --name etl-run-$(date +%s) \

      - name: Waiting for step function execution
        run: |
          sleep 5
          STATE_MACHINE_ARN="arn:aws:states:${{ secrets.AWS_REGION }}:${{ steps.account.outputs.account_id }}:stateMachine:ETLWorkflow"
          
          echo "Obteniendo última ejecución..."
          EXECUTION_ARN=$(aws stepfunctions list-executions \
            --state-machine-arn "$STATE_MACHINE_ARN" \
            --max-items 1 \
            --query "executions[0].executionArn" \
            --output json | tr -d '"')

          echo "Última ejecución: $EXECUTION_ARN"
          MAX_RETRIES=30
          RETRY_INTERVAL=60  # segundos

          for ((i=1;i<=MAX_RETRIES;i++)); do
            STATUS=$(aws stepfunctions describe-execution \
              --execution-arn "$EXECUTION_ARN" \
              --query "status" \
              --output text)

            echo "[$i/$MAX_RETRIES] Estado actual: $STATUS"

            if [[ "$STATUS" == "SUCCEEDED" ]]; then
              echo "✅ Ejecución completada exitosamente."
              break
            elif [[ "$STATUS" == "FAILED" || "$STATUS" == "TIMED_OUT" || "$STATUS" == "ABORTED" ]]; then
              echo "❌ Ejecución fallida: $STATUS"
              exit 1
            else
              echo "⏳ Aún ejecutándose, esperando $RETRY_INTERVAL segundos..."
              sleep $RETRY_INTERVAL
            fi
          done

          if [[ "$STATUS" != "SUCCEEDED" ]]; then
            echo "⏰ Tiempo de espera agotado después de $((MAX_RETRIES * RETRY_INTERVAL)) segundos"
            exit 1
          fi

  create-model:
    needs: start-data-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Api Endpoint
        id: api_credentials
        run: |
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='api-gateway'].ApiId" --output text)
          echo "api_id=$API_ID" >> "$GITHUB_OUTPUT"
      
      - name: Install dependencies
        working-directory: model
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute python Script
        working-directory: model
        run: python3 main.py ${{ steps.api_credentials.outputs.api_id }} ${{ secrets.AWS_REGION }}

      - name: Commit and push model artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add model/model_columns.json model/model.joblib
          git commit -m "Auto: update model artifacts [skip ci]" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git HEAD:main


  destroy-resources-app:
    needs: create-model
    runs-on: ubuntu-latest
    if: ${{ vars.TF_DESTROY == 'true' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: infraestructure
        run: terraform init

      - name: Set execute permissions on terraform-import.sh
        working-directory: infraestructure
        run: chmod +x ./terraform-import.sh

      - name: Terraform Import Resources
        working-directory: infraestructure
        run: ./terraform-import.sh

      - name: Terraform Destroy
        working-directory: infraestructure
        run: terraform destroy -auto-approve
